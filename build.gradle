apply plugin: 'java'
apply plugin: 'application'

repositories {
    mavenCentral()

    flatDir {
        dirs './libs'
        // https://github.com/DiegoCatalano/Catalano-Framework/releases
        // Download and unpack from libs.zip:
        //  ./libs/Catalano.Core.jar
        //  ./libs/Catalano.Math.jar
        //  ./libs/Catalano.IO.jar
        //  ./libs/Catalano.Image.jar
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava.options.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

mainClassName = 'ksn.imgusage.filtersdemo.MainApp'
version = '0.0.2'

jar {
    manifest {
        attributes 'Main-Class' : mainClassName,
                   'Title'      : 'Demonstration of the use of image filters - Java SWING desktop application',
                   'Description': 'Examples of usage Catalano-Framework: https://github.com/DiegoCatalano/Catalano-Framework',
                   'Version'    : version,
                   'Vendor'     : 'SeregaLBN',
                   'Build-Date' : new Date().format("yyyy-MM-dd'T 'HH:mm:ss.SSSZZ")
    }
}

dependencies {
    compile 'org.slf4j:slf4j-simple:1.7.26'
    compile 'org.openpnp:opencv:3.4.2-1'

    compile name: 'Catalano.Core'
    compile name: 'Catalano.Math'
    compile name: 'Catalano.IO'
    compile name: 'Catalano.Image'
}

// can run as single JAR:
//  java -jar ./ImageFilterExamples/build/libs/ImageFilterExamples-fat-{version}.jar
task fatJar(type: Jar) {
    manifest {
        attributes jar.manifest.attributes
    }
    baseName = project.name + '-fat'
    from {
        configurations.compile.collect {
            it.isDirectory()
                ? it
                : zipTree(it).matching{exclude{
                    //println it
                    //it.name == 'META-INF'
                    it.toString().contains('!META-INF')
                }}
        }
    }
    with jar
}
project.tasks.build.dependsOn project.tasks.fatJar


def downloadExampleImage() {
    // https://commons.wikimedia.org/wiki/File:%D0%92%D0%BE%D0%BB%D0%BE%D0%B4%D0%B8%D0%BC%D0%B8%D1%80%D1%81%D1%8C%D0%BA%D0%B0_%D0%B3%D1%96%D1%80%D0%BA%D0%B0,_%D0%92%D0%BE%D0%BB%D0%BE%D0%B4%D0%B8%D0%BC%D0%B8%D1%80_%D1%82%D0%B0_%D0%94%D0%BD%D1%96%D0%BF%D1%80%D0%BE.JPG
    try {
        def url = new java.net.URL('https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/%D0%92%D0%BE%D0%BB%D0%BE%D0%B4%D0%B8%D0%BC%D0%B8%D1%80%D1%81%D1%8C%D0%BA%D0%B0_%D0%B3%D1%96%D1%80%D0%BA%D0%B0%2C_%D0%92%D0%BE%D0%BB%D0%BE%D0%B4%D0%B8%D0%BC%D0%B8%D1%80_%D1%82%D0%B0_%D0%94%D0%BD%D1%96%D0%BF%D1%80%D0%BE.JPG/1024px-%D0%92%D0%BE%D0%BB%D0%BE%D0%B4%D0%B8%D0%BC%D0%B8%D1%80%D1%81%D1%8C%D0%BA%D0%B0_%D0%B3%D1%96%D1%80%D0%BA%D0%B0%2C_%D0%92%D0%BE%D0%BB%D0%BE%D0%B4%D0%B8%D0%BC%D0%B8%D1%80_%D1%82%D0%B0_%D0%94%D0%BD%D1%96%D0%BF%D1%80%D0%BE.JPG')

        def file = project.file('./exampleImages/1024px-VolodimirHillAndDnieper.jpg')
        if (file.exists()) {
            println 'Example image already downloaded! ' + file.absolutePath
            return

            // recheck size
            def conn = null
            try {
                conn = url.openConnection()
                conn.setRequestMethod('HEAD')
                long size = conn.contentLengthLong
                if (file.length() == size)
                    return // all ok

                System.err.println('Illegal file size: delete it')
                file.delete()
            } finally {
                if (conn != null)
                    conn.disconnect()
            }
        }

        file.parentFile.mkdir()

        println 'Try download example image from ' + url
        new java.io.BufferedInputStream(url.openStream()).withCloseable { bin ->
        new java.io.FileOutputStream(file).withCloseable { fos ->
            def buffer = new byte[10240]
            long total = 0
            for (int i=0; true; ++i) {
                int read = bin.read(buffer, 0, buffer.length)
                if (read < 0)
                    break
                if (read == 0)
                    continue
                fos.write(buffer, 0, read)
                total += read
                println '  ...iteration #' + (1+i) + ': read=' + read + '; total=' + total
            }
            println 'Example image downloaded! ' + file.absolutePath
        }}
    } catch (Exception ex) {
        System.err.println('Can`t download example image: ' + ex)
    }
}

gradle.taskGraph.beforeTask { Task task ->
    if ((task.project.name == 'ImageFilterExamples') && (task.name == 'processResources'))
        downloadExampleImage()
}
